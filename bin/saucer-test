#!/usr/bin/env node

/**
 * Module dependencies.
 */

var program = require('commander');
var spawn = require('win-fork');
var out = require('..').out;
var server = require('../lib/server');
var join = require('path').join;
require('js-yaml');

program
  .option('-l, --local', 'run in local mode')
  .option('-p, --port <port>', 'port to run the server', 5555);
program.parse(process.argv);

var app = server();

function listen(cb) {
  app.listen(program.port, function() {
    cb(program.port);
  });
};

if (program.local) return listen(protractor);

exec('install').next(function() {
  listen(function(port) {
    var connect = exec('connect');
    connect.stdout.on('data', function(d) {
      if (!~d.toString().indexOf('Connected!')) return;
      protractor(port, function() {
        connect.kill();
      });
    });
    process.on('exit', function() {
      connect.kill();
    });
  });
});

function protractor(port) {
  var bin = join(__dirname, 'saucer-driver');
  var address = 'http://localhost:' + port;
  var selport = 4446;

  var browsers = expand(require(join(process.cwd(), '.saucer.yml')));

  var remaining = browsers.length;
  var failures = [];
  function end(browser, code) {
    if (code !== 0) failures.push(browser);
    remaining--;
    if (remaining !== 0) return;
    if (failures.length) process.exit(1);
    process.exit(0);
  };

  browsers.forEach(function(browser) {
    var args = ['--browser', browser.name, '--address', address, '-p', selport++];
    if (program.local) args.push('--local');
    if (browser.version) args = args.concat(['--browserv', browser.version]);
    if (browser.platform) args = args.concat(['--platform', browser.platform]);

    var proc = spawn(bin, args, { stdio: 'pipe', customFds: [0, 1, 2] });

    proc.on('close', function(code) {
      end(browser, code);
    });
    proc.stdout.on('data', function(d) {
      process.stdout.write(('' + d).replace(process.env.SAUCE_ACCESS_KEY, '****'));
    });
    proc.stderr.on('data', function(d) {
      process.stdout.write('' + d);
    });
  });
};

function exec(cmd, args) {
  args = args || [];
  var bin = join(__dirname, 'saucer-' + cmd);
  var proc = spawn(bin, args, { stdio: 'pipe', customFds: [0, 1, 2] });
  proc.on('close', function(code) {
    if (code === 0) return;
    process.exit(code);
  });
  proc.stdout.on('data', function(d) {
    process.stdout.write(('' + d).replace(process.env.SAUCE_ACCESS_KEY, '****'));
  });
  proc.stderr.on('data', function(d) {
    process.stdout.write('' + d);
  });
  proc.next = function(fn) {
    proc.on('close', fn);
  };
  return proc;
};

function expand(platforms) {
  var browsers = [];
  Object.keys(platforms).forEach(function(platform) {
    platforms[platform].forEach(function(bv) {
      var browser = bv.split(' ');

      var name = browser[0].toLowerCase();
      if (name === 'ie') name = 'internet explorer';

      if (!browser[1]) return browsers.push({
        platform: platform,
        name: name
      });

      // TODO expand the version number
      var version = (browser[1] || '').split('-');

      if (version.length === 1) return browsers.push({
        platform: platform,
        name: name,
        version: version[0]
      });

      var start = parseInt(version[0], 10);
      var end = parseInt(version[1], 10);
      for(var i = start; i <= end; i++) {
        browsers.push({
          platform: platform,
          name: name,
          version: '' + i
        });
      }
    });
  });

  return browsers;
};
